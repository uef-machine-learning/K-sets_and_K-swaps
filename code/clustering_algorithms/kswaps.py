"""
K-swaps clustering algorithm
"""
import numpy as np
import random
from clustering_algorithms import ksets
from data_utilities import data_utility
import enum

# Constants
LOG_ENABLE = True


def _progress_log(i, total):
    if i % 10 == 0:
        print('In progress... ', i, '/', total)


# Select a representative (histogram) randomly, select a data point randomly and 
# replace with the selected representative 
def cluster(data, number_of_cluster, max_hist_length, rs_iteration):
    labels, histograms, dth = ksets.cluster(data, number_of_cluster, max_hist_length)

    if LOG_ENABLE:
        print('SDTH after applying first k-stes: ', np.sum(dth))
    
    N = len(data)
    max_iter = 15
    sdth = np.sum(dth) # Sum of distances to histograms

    for i in range(rs_iteration):
        if LOG_ENABLE: _progress_log(i, rs_iteration)
        
        new_histograms = np.copy(histograms)
       
        # Randomly select a cluster to drop
        cluster_id = random.randrange(0, number_of_cluster)
        # Randomly select a data point to be used as new histogram
        data_id = random.randrange(0, N)
        
        cluster_data = data[data_id]
        unique, counts = np.unique(cluster_data, return_counts=True)
        histogram_dict = dict(zip(unique, counts))
        histogram_dict.pop(data_utility.DEFAULT_STR, None)
        new_histograms[cluster_id] = histogram_dict

        new_labels, new_histograms, new_dth = ksets.cluster(data, number_of_cluster, max_hist_length, new_histograms, max_iter)

        new_sdth = np.sum(new_dth)
        if new_sdth < sdth:
            if LOG_ENABLE: print('A better clustering was found with sdth = ', new_sdth)
            
            # override original_labels and total_sumd with the new values generated by random swap
            labels = new_labels
            dth = new_dth
            histograms = new_histograms
            sdth = new_sdth


    return (labels, histograms, dth)
